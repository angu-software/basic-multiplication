# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: '[GHA] Development Tests'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  development-tests:
    name: Development Tests
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.app
    - name: Build for testing
      run: xcodebuild \
        build-for-testing \
        -scheme 'Basic Multiplication' \
        -testPlan 'DevelopmentTests' \
        -destination 'generic/platform=iOS Simulator' \
        -derivedDataPath '.xcpipeline/${{ github.sha }}/derived_data' \
        -testProductsPath '.xcpipeline/${{ github.sha }}/artifacts/test_products.xctestproducts' \
        -resultBundlePath '.xcpipeline/${{ github.sha }}/artifacts/build_result_bundle.xcresult' \
        "CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY='' CODE_SIGNING_ALLOWED=NO" 
    - name: Test without building
      run: xcodebuild \
        test-without-building \
        -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
        -testProductsPath '.xcpipeline/${{ github.sha }}/artifacts/test_products.xctestproducts' \
        -resultBundlePath '.xcpipeline/${{ github.sha }}/artifacts/testing_result_bundle.xcresult'
    - name: Archive
      run: xcodebuild \
        archive \
        -scheme 'Basic Multiplication' \
        -archivePath '.xcpipeline/${{ github.sha }}/artifacts/archive.xcarchive'
    - name: Tag RC build
      run: echo This would tag the RC
